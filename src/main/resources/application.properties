spring.application.name=servicio-productos

#forma manual
#server.port=8001

#forma dinamica 
server.port=${PORT:0}

#se crea identificador de la instancia para eureka
#eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#los logs se centralizaron en un servicio commons
#logging.file.name=C:/elk/spring-boot-elk.log

#se pone donde se encuentra el servidor eureka, se puede omitir si se encuentra en las misma maquina, pero mejor adicionarla por buenas practicas
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#CONSUL: se pone donde se encuentra el servidor consul
spring.cloud.consul.discovery.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
#para un valor randow en el instance_id ${random.value} //PARA SUBIR VARIAS INSTANCIAS SE DEBE TENER ESTA VALOR RANDOM DE LO CONTRARIO SIEMPRE SUBE UNO
#para un valor del puerto en el instance_id ${server.port}
spring.cloud.consul.discovery.instance-zone=http://localhost:8500

#para subirlo por docker se debe cambiar el host (por defecto: lohalhost) por el nombre: consul, ya que se llaman entre contenedores solo por nombres
spring.cloud.consul.host=localhost

#CONSUL: Cambia el contexto para que al llamar al controller comience con el nombre del path /servicio-productos
#server.servlet.context-path=/servicio-productos
#CONSUL: Ruta para que Consul haga los health checks, al cambiar el context-path cambia la ruta por defecto: /actuator/health
#			se puede hacer un llamado a un metodo ya implementado en el controller como el /listar
#spring.cloud.consul.discovery.health-check-path=/servicio-productos/listar

#CONSUL: Health checking a nivel de servicio o de nodo del cluster consul
#spring.cloud.consul.discovery.health-check-interval= 2s

#CONSUL: Registrar el servicio con la IP no con el hostname
spring.cloud.consul.discovery.prefer-ip-address=true

#MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=America/Bogota&allowPublicKeyRetrieval=true&useSSL=false #cuando sucede error se deba adicionar &allowPublicKeyRetrieval=true&useSSL=false
#spring.datasource.username=root
#spring.datasource.password=sasa
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.hibernate.ddl-auto=create

#PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/db_springboot_cloud
spring.datasource.username=postgres
spring.datasource.password=sasa
spring.datasource.driver-class-name=org.postgresql.Driver
#por la version mas adelantada no se especifica la version ejemplo version 9.5 PostgreSQL95Dialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create

#Para evitar que genere un error spring boot y postgresql (por el momento no hubo problemas puede ser por la version mas adelantada)
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#muestra en consola las consultas de base de datos
logging.level.org.hibernate.SQL=debug

#permite ver el traceid, spanid para las trazas de los servicios
#probabilidad en que envia la traza
spring.sleuth.sampler.probability=1.0
#se pone donde se encuentra el servidor de zipkin, por defecto es el puerto 9411
spring.zipkin.base-url=http://localhost:9411/

spring.zipkin.enabled=false

#Ruta para a donde se exporta el reporte hecho con jasper
#E:\\temp\\me\\Report\\
#si esta vacio queda en la raiz del proyecto
path.reportes=